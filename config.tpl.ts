import {
  Command,
  PinionContext,
  commander,
  exec,
  loadJSON,
  prompt,
  when,
} from '@featherscloud/pinion'

interface Package {
  name: string
  value: string
}

function buildProfile(packages: string[]) {
  let template = '# Profile generated by Windows Config Builder ðŸ˜Š\n'

  if (packages.includes('zoxide')) {
    template = template.concat(
      '#Zoxide\nInvoke-Expression (& { (zoxide init powershell | Out-String) })\n\n'
    )
  }

  if (packages.includes('starship')) {
    template = template.concat(
      '#Starship\n$Env:STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"\nInvoke-Expression (&starship init powershell)\n\n'
    )
  }

  if (packages.includes('bat')) {
    template = template.concat(
      '#Bat\n$env:BAT_CONFIG_DIR="$HOME/.config/bat"\n\n'
    )
  }

  return template
}

const program = new Command()
  .description('A readme generator')
  .option('-n, --name <name>', 'Name of your app')
  .option('-d, --description <description>', 'The description for your app')

// Setup the Context to receive user input
export interface Context extends PinionContext {
  name: string
  description: string
  packages: Package[]
  packagesMap: Map<string, string>
}

// The template uses Context variables.
function readme({ name, description }: Context) {
  return `# ${name}

> ${description}

This is a readme generated by Pinion

Copyright (c) ${new Date().getFullYear()}
`
}

export function generate(init: Context) {
  return Promise.resolve(init)
    .then(commander(program))
    .then(
      loadJSON(
        `./packages.json`,
        (packages) => ({
          packages,
          packagesMap: new Map(packages.map((p: Package) => [p.name, p.value])),
        }),
        []
      )
    )
    .then(
      prompt((context) => ({
        selectedPackages: {
          type: 'checkbox',
          message: 'choose the packages',
          choices: context.packages.map((p) => p.name),
          loop: false,
        },
      }))
    )
    .then(async (context) => {
      for (const label of context.selectedPackages) {
        try {
          await exec(`winget install ${context.packagesMap.get(label)}`)(
            context
          )
        } catch {}
      }

      return context
    })
    .then(
      prompt({
        powershell: {
          type: 'confirm',
          message:
            'Would you like to add a powershell profile symlink at ~/.config/profile.ps1',
        },
      })
    )
    .then(
      when(
        (context) => context.powershell,
        exec(
          'pwsh -Command  if (Test-Path -Path $PROFILE) { Remove-Item -Path $PROFILE }'
        ),
        exec(
          'pwsh -Command "New-Item -ItemType SymbolicLink -Path "$PROFILE" -Target "$HOME\\.config\\profile.ps1""'
        )
      )
    )
    .then(
      prompt({
        createConfig: {
          type: 'confirm',
          message: 'Do you want to start a new config?',
        },
      })
    )
    .then(
      when(
        (context) => context.selectedPackages.includes('Neovim'),
        exec(
          'pwsh -Command New-Item -ItemType SymbolicLink -Path "$env:localappdata\nvim" -Target "$HOME.config\nvim"'
        )
      )
    )
}
